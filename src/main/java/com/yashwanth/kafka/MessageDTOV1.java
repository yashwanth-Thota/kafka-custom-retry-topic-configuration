/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yashwanth.kafka;

import org.apache.avro.reflect.AvroSchema;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@AvroSchema("{"
    + "\"type\":\"record\","
    + "\"name\":\"MessageDTO\","
    + "\"namespace\":\"com.yashwanth.kafka\","
    + "\"fields\":["
    + " {\"name\":\"messageId\", \"type\":\"string\"},"
    + " {\"name\":\"message\", \"type\":\"string\"},"
    + " {\"name\":\"mainTopicError\", \"type\":\"string\", \"default\":\"\"},"
    + " {\"name\":\"retry0Error\", \"type\":\"string\", \"default\":\"\"},"
    + " {\"name\":\"retry1Error\", \"type\":\"string\", \"default\":\"\"},"
    + " {\"name\":\"retry2Error\", \"type\":\"string\", \"default\":\"\"}"
    + " ]"
    + "}")
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MessageDTOV1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7417585452441413777L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MessageDTOV1\",\"namespace\":\"com.yashwanth.kafka\",\"fields\":[{\"name\":\"messageId\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"mainTopicError\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"retry0Error\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"retry1Error\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"retry2Error\",\"type\":\"string\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MessageDTOV1> ENCODER =
      new BinaryMessageEncoder<MessageDTOV1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MessageDTOV1> DECODER =
      new BinaryMessageDecoder<MessageDTOV1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MessageDTOV1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MessageDTOV1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MessageDTOV1>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MessageDTOV1 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MessageDTOV1 from a ByteBuffer. */
  public static MessageDTOV1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence messageId;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.lang.CharSequence mainTopicError;
  @Deprecated public java.lang.CharSequence retry0Error;
  @Deprecated public java.lang.CharSequence retry1Error;
  @Deprecated public java.lang.CharSequence retry2Error;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MessageDTOV1() {}

  /**
   * All-args constructor.
   * @param messageId The new value for messageId
   * @param message The new value for message
   * @param mainTopicError The new value for mainTopicError
   * @param retry0Error The new value for retry0Error
   * @param retry1Error The new value for retry1Error
   * @param retry2Error The new value for retry2Error
   */
  public MessageDTOV1(java.lang.CharSequence messageId, java.lang.CharSequence message, java.lang.CharSequence mainTopicError, java.lang.CharSequence retry0Error, java.lang.CharSequence retry1Error, java.lang.CharSequence retry2Error) {
    this.messageId = messageId;
    this.message = message;
    this.mainTopicError = mainTopicError;
    this.retry0Error = retry0Error;
    this.retry1Error = retry1Error;
    this.retry2Error = retry2Error;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return messageId;
    case 1: return message;
    case 2: return mainTopicError;
    case 3: return retry0Error;
    case 4: return retry1Error;
    case 5: return retry2Error;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: messageId = (java.lang.CharSequence)value$; break;
    case 1: message = (java.lang.CharSequence)value$; break;
    case 2: mainTopicError = (java.lang.CharSequence)value$; break;
    case 3: retry0Error = (java.lang.CharSequence)value$; break;
    case 4: retry1Error = (java.lang.CharSequence)value$; break;
    case 5: retry2Error = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'messageId' field.
   * @return The value of the 'messageId' field.
   */
  public java.lang.CharSequence getMessageId() {
    return messageId;
  }

  /**
   * Sets the value of the 'messageId' field.
   * @param value the value to set.
   */
  public void setMessageId(java.lang.CharSequence value) {
    this.messageId = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'mainTopicError' field.
   * @return The value of the 'mainTopicError' field.
   */
  public java.lang.CharSequence getMainTopicError() {
    return mainTopicError;
  }

  /**
   * Sets the value of the 'mainTopicError' field.
   * @param value the value to set.
   */
  public void setMainTopicError(java.lang.CharSequence value) {
    this.mainTopicError = value;
  }

  /**
   * Gets the value of the 'retry0Error' field.
   * @return The value of the 'retry0Error' field.
   */
  public java.lang.CharSequence getRetry0Error() {
    return retry0Error;
  }

  /**
   * Sets the value of the 'retry0Error' field.
   * @param value the value to set.
   */
  public void setRetry0Error(java.lang.CharSequence value) {
    this.retry0Error = value;
  }

  /**
   * Gets the value of the 'retry1Error' field.
   * @return The value of the 'retry1Error' field.
   */
  public java.lang.CharSequence getRetry1Error() {
    return retry1Error;
  }

  /**
   * Sets the value of the 'retry1Error' field.
   * @param value the value to set.
   */
  public void setRetry1Error(java.lang.CharSequence value) {
    this.retry1Error = value;
  }

  /**
   * Gets the value of the 'retry2Error' field.
   * @return The value of the 'retry2Error' field.
   */
  public java.lang.CharSequence getRetry2Error() {
    return retry2Error;
  }

  /**
   * Sets the value of the 'retry2Error' field.
   * @param value the value to set.
   */
  public void setRetry2Error(java.lang.CharSequence value) {
    this.retry2Error = value;
  }

  /**
   * Creates a new MessageDTOV1 RecordBuilder.
   * @return A new MessageDTOV1 RecordBuilder
   */
  public static com.yashwanth.kafka.MessageDTOV1.Builder newBuilder() {
    return new com.yashwanth.kafka.MessageDTOV1.Builder();
  }

  /**
   * Creates a new MessageDTOV1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MessageDTOV1 RecordBuilder
   */
  public static com.yashwanth.kafka.MessageDTOV1.Builder newBuilder(com.yashwanth.kafka.MessageDTOV1.Builder other) {
    return new com.yashwanth.kafka.MessageDTOV1.Builder(other);
  }

  /**
   * Creates a new MessageDTOV1 RecordBuilder by copying an existing MessageDTOV1 instance.
   * @param other The existing instance to copy.
   * @return A new MessageDTOV1 RecordBuilder
   */
  public static com.yashwanth.kafka.MessageDTOV1.Builder newBuilder(com.yashwanth.kafka.MessageDTOV1 other) {
    return new com.yashwanth.kafka.MessageDTOV1.Builder(other);
  }

  /**
   * RecordBuilder for MessageDTOV1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MessageDTOV1>
    implements org.apache.avro.data.RecordBuilder<MessageDTOV1> {

    private java.lang.CharSequence messageId;
    private java.lang.CharSequence message;
    private java.lang.CharSequence mainTopicError;
    private java.lang.CharSequence retry0Error;
    private java.lang.CharSequence retry1Error;
    private java.lang.CharSequence retry2Error;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yashwanth.kafka.MessageDTOV1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mainTopicError)) {
        this.mainTopicError = data().deepCopy(fields()[2].schema(), other.mainTopicError);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.retry0Error)) {
        this.retry0Error = data().deepCopy(fields()[3].schema(), other.retry0Error);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.retry1Error)) {
        this.retry1Error = data().deepCopy(fields()[4].schema(), other.retry1Error);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.retry2Error)) {
        this.retry2Error = data().deepCopy(fields()[5].schema(), other.retry2Error);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MessageDTOV1 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yashwanth.kafka.MessageDTOV1 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.messageId)) {
        this.messageId = data().deepCopy(fields()[0].schema(), other.messageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mainTopicError)) {
        this.mainTopicError = data().deepCopy(fields()[2].schema(), other.mainTopicError);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.retry0Error)) {
        this.retry0Error = data().deepCopy(fields()[3].schema(), other.retry0Error);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.retry1Error)) {
        this.retry1Error = data().deepCopy(fields()[4].schema(), other.retry1Error);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.retry2Error)) {
        this.retry2Error = data().deepCopy(fields()[5].schema(), other.retry2Error);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'messageId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageId() {
      return messageId;
    }

    /**
      * Sets the value of the 'messageId' field.
      * @param value The value of 'messageId'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setMessageId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.messageId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'messageId' field has been set.
      * @return True if the 'messageId' field has been set, false otherwise.
      */
    public boolean hasMessageId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'messageId' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearMessageId() {
      messageId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainTopicError' field.
      * @return The value.
      */
    public java.lang.CharSequence getMainTopicError() {
      return mainTopicError;
    }

    /**
      * Sets the value of the 'mainTopicError' field.
      * @param value The value of 'mainTopicError'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setMainTopicError(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.mainTopicError = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'mainTopicError' field has been set.
      * @return True if the 'mainTopicError' field has been set, false otherwise.
      */
    public boolean hasMainTopicError() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'mainTopicError' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearMainTopicError() {
      mainTopicError = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'retry0Error' field.
      * @return The value.
      */
    public java.lang.CharSequence getRetry0Error() {
      return retry0Error;
    }

    /**
      * Sets the value of the 'retry0Error' field.
      * @param value The value of 'retry0Error'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setRetry0Error(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.retry0Error = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'retry0Error' field has been set.
      * @return True if the 'retry0Error' field has been set, false otherwise.
      */
    public boolean hasRetry0Error() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'retry0Error' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearRetry0Error() {
      retry0Error = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'retry1Error' field.
      * @return The value.
      */
    public java.lang.CharSequence getRetry1Error() {
      return retry1Error;
    }

    /**
      * Sets the value of the 'retry1Error' field.
      * @param value The value of 'retry1Error'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setRetry1Error(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.retry1Error = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'retry1Error' field has been set.
      * @return True if the 'retry1Error' field has been set, false otherwise.
      */
    public boolean hasRetry1Error() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'retry1Error' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearRetry1Error() {
      retry1Error = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'retry2Error' field.
      * @return The value.
      */
    public java.lang.CharSequence getRetry2Error() {
      return retry2Error;
    }

    /**
      * Sets the value of the 'retry2Error' field.
      * @param value The value of 'retry2Error'.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder setRetry2Error(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.retry2Error = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'retry2Error' field has been set.
      * @return True if the 'retry2Error' field has been set, false otherwise.
      */
    public boolean hasRetry2Error() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'retry2Error' field.
      * @return This builder.
      */
    public com.yashwanth.kafka.MessageDTOV1.Builder clearRetry2Error() {
      retry2Error = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MessageDTOV1 build() {
      try {
        MessageDTOV1 record = new MessageDTOV1();
        record.messageId = fieldSetFlags()[0] ? this.messageId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.mainTopicError = fieldSetFlags()[2] ? this.mainTopicError : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.retry0Error = fieldSetFlags()[3] ? this.retry0Error : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.retry1Error = fieldSetFlags()[4] ? this.retry1Error : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.retry2Error = fieldSetFlags()[5] ? this.retry2Error : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MessageDTOV1>
    WRITER$ = (org.apache.avro.io.DatumWriter<MessageDTOV1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MessageDTOV1>
    READER$ = (org.apache.avro.io.DatumReader<MessageDTOV1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
